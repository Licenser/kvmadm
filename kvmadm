#!/usr/bin/env bash
VM_POOL=data/vms
VMDISK_ROOT=/dev/zvol/rdsk/$VM_POOL
NIC_TYPE=virtio
HDD_TYPE=virtio
BASE_DIR=/etc/vms
RUN_PATH=/tmp

function rand_nic() {
	printf 'DE:AD:%02X:%02X:%02X:%02X\n' $((RANDOM%257)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256))
}

function new_vm() {
	NAME=$1
	if [ -f "$BASE_DIR/$NAME" ]; then
		echo "VM $NAME already exists"
		exit 1
	fi
	MAC=`rand_nic`
	ID=`next_id`
	cat > "$BASE_DIR/$NAME" <<EOF 
NAME=$NAME
DISK=
ISO=
NIC0_VNIC=
NIC0_MAC=$MAC
MEM=
NIC0_TYPE=$NIC_TYPE
ACTIVE=0
ID=$ID
CPUS=1
OPTS=
EOF
}

function check_vm() {
	if [ ! -f "$BASE_DIR/$1" ]; then
		echo "VM $1 does not exist."
		exit 1
	fi
}

function show_vm() {
	VM=$1
	if [ -z "$(vm_status $VM)" ]; then
		STATUS="offline"
	else
		STATUS="online"
	fi
	if [ "$(vm_val $VM ACTIVE)" == 0 ]; then
		STATUS="inactive"
  fi


	cat <<EOF
VM Status - $(vm_val $VM NAME) 
=================

General
=======
ID: $(vm_val $VM ID)
Name: $(vm_val $VM NAME)
Status: $STATUS

Hardware
========
CPUs: $(vm_val $VM CPUS)
Memory: $(vm_val $VM MEM MB)

IO
==
ISO: $(vm_val $VM ISO)
HDD: $(vm_val $VM DISK)
EOF
	NIC_ID=0 
	while [ "$(vm_val $VM "NIC${NIC_ID}_VNIC")" ]; do
		VNIC=$(vm_val $VM "NIC${NIC_ID}_VNIC")
		MAC=$(vm_val $VM "NIC${NIC_ID}_MAC")
		TYPE=$(vm_val $VM "NIC${NIC_ID}_TYPE")
		if [ -z "${TYPE}" ]; then
			TYPE="virtio"
		fi
		VLAN=$(vm_val $VM "NIC${NIC_ID}_VLAN")
		if [ -z "${VLAN}" ]; then
			VLAN="0"
		fi
		cat <<EOF

Network Adapter $NIC_ID
=======================
Type: $TYPE
VNIC: $VNIC
MAC:  $MAC
VLAN: $VLAN
EOF
		NIC_ID=`expr $NIC_ID + 1`
	done
}
function start_vm() {
	VM=$1
	NAME=$(vm_val $VM NAME)
	if vm_status $VM; then
		echo "VM $NAME already running." 
		exit 1
	fi
	if [ "$(vm_val $VM ACTIVE)" == "0" ]; then
		echo "VM is deactivated."
		exit 1
  fi
	echo "Starting VM $NAME"
	PARAMS="-enable-kvm -nographic -no-hpet -smp $(vm_val $VM CPUS)"
	PARAMS="${PARAMS} -monitor unix:${RUN_PATH}/kvm.${NAME}.mon,server,nowait"
	NIC_ID=0 
	while [ "$(vm_val $VM "NIC${NIC_ID}_VNIC")" ]; do
		VNIC=$(vm_val $VM "NIC${NIC_ID}_VNIC")
		MAC=$(vm_val $VM "NIC${NIC_ID}_MAC")
		TYPE=$(vm_val $VM "NIC${NIC_ID}_TYPE")
		if [ -z "${TYPE}" ]; then
			TYPE="virtio"
		fi
		VLAN=$(vm_val $VM "NIC${NIC_ID}_VLAN")
		if [ -z "${VLAN}" ]; then
			VLAN="0"
		fi
		PARAMS="${PARAMS} -net nic,vlan=${VLAN},name=net${NIC_ID},model=${TYPE},macaddr=${MAC}"
  	PARAMS="${PARAMS} -net vnic,vlan=${VLAN},name=net${NIC_ID},ifname=${VNIC},macaddr=${MAC}"
		NIC_ID=`expr $NIC_ID + 1`
	done
	PARAMS="${PARAMS} -m $(vm_val $VM MEM) -vnc :$(vm_val $VM ID)  -no-hpet"
	PARAMS="${PARAMS} -chardev socket,id=serial0,path=${RUN_PATH}/kvm.${NAME}.console,server,nowait -serial chardev:serial0 -hdb $VMDISK_ROOT/$(vm_val $VM DISK) $(vm_val $VM OPTS)"
	qemu-system-x86_64 ${PARAMS} > ${RUN_PATH}/kvm.${NAME}.log &
	echo $! > ${RUN_PATH}/kvm.${NAME}.pid
}
function next_id() {
	expr `cat $BASE_DIR/* | grep "^ID=" | sed "s/^ID=//" | sort -n | tail -1` + 1
}

function write_opt() {
	if [ -z "$3" ]; then
		sed -i "s/^${2}=.*//" ${BASE_DIR}/${1}
	else	
		if grep "^${2}=" ${BASE_DIR}/${1} > /dev/null; then
			sed -i "s/^${2}=.*/${2}=${3}/" ${BASE_DIR}/${1}
		else
			echo "${2}=${3}" >> ${BASE_DIR}/${1}
		fi
	fi
}

function vm_status() {
	PID=`cat ${RUN_PATH}/kvm.${1}.pid 2> /dev/null`
	ps -eo pid | sed 's/ //g' | grep "^$PID$"
}

function vm_val() {
	if [ -f "${BASE_DIR}/${1}" ]; then
	  echo `grep "$2=" "${BASE_DIR}/${1}" | sed "s/$2=//"`
	fi
}

function set_opt() {
	VM=$1
	if [ ! -f $BASE_DIR/$VM ]
	then
		echo "Can't find VM $MV_CFG_PATH"
		exit 1
	fi
	OPT=$2
	case $OPT in
		opts)
			write_opt $VM "OPTS" "$3"
		;;
		active)
			write_opt $VM "ACTIVE" "$3"
		;;
		cpu)
			write_opt $VM "CPUS" "$3"
		;;
		mem)
			write_opt $VM "MEM" "$3"
		;;
		disk)
			if [ -f $VMDISK_ROOT/$3 ]; then
				write_opt $VM "DISK" "$3"
			else
				echo "Can't find VM DISK $3"
				echo "Plese crate it with:\nzfs create -V <size e.g. 10g> $VM_POOL/$3"
				exit 1
			fi
		;;
		iso)
			if [ -f $3]; then
				write_opt $VM "ISO" "$3"
			else
				echo "Can't find ISO file $3."
			fi
		;;
		net)
			case $4 in
				type)
					write_opt $VM "NIC${3}_TYPE" "$5"
				;;
				vnic)
					if dladm show-vnic | tail -n +2 | grep "^$5 " > /dev/null
					then
						write_opt $VM "NIC${3}_VNIC" "$5"
					else
						echo "Can't find vnic $5."
						echo "Create it with:"
						echo "dladm create-vnic -l <interface> $5"
						exit 1
					fi
				;;
				mac)
					if [ "$5" == "rand" ]; then
						write_opt $VM "NIC${3}_MAC" `rand_nic`
					else	
						write_opt $VM "NIC${3}_MAC" "$5"
					fi
				;;
				vlan)
					write_opt $VM "NIC${3}_VLAN" "$5"
				;;
				*)
					echo "Invalid network category, valid options are: type, vnic, mac, vlan."
				;;
			esac
			;;
		*)
			echo "Valid options are: cpu, mem, disk, iso."
		;;
	esac	
}

case $1 in
  start)
	if [ "$2" == "all" ]; then
    CPWD=$PWD
		cd $BASE_DIR
		for vm in `ls -1`; do
			if [ "`vm_val $vm ACTIVE`" != "0" ]; then
				start_vm $vm
			fi
		done
		cd $CPWD
		exit 0
	fi
	check_vm $2
	start_vm $2
	;;
  list)
    CPWD=$PWD
		cd $BASE_DIR
	  printf "%-5s %20s %s\n" "ID" "VM" "Status"
		for vm in `ls -1`;
		do
			NAME=`vm_val $vm NAME`
			PID=`vm_status $NAME`
			if [ -z "$PID" ]; then
				STATE="ofline"
			else
				STATE="online ($PID)"
			fi
			ACTIVE=`vm_val $vm ACTIVE`
			if [  "$ACTIVE" == 0 ]; then
				STATE="inactive"
			fi
			printf "%-5d %20s %s\n" `vm_val $vm ID` "$NAME" "$STATE"
	done
	cd $CPWD
	;;
  stop) 
		check_vm $2
		NAME=`vm_val $2 NAME`
		PID=`vm_status $NAME`
		if [ -z "$PID" ]; then
			echo "VM $NAME not running"
		else
			echo "VM $NAME stopping... ($PID)"
			kill $PID
		fi
	;;
  set)
		cehck_vm $2
		set_opt "$2" "$3" "$4" "$5" "$6"
	;;
	new)
	  new_vm $2	
	;;
	activate)
		cehck_vm $2
		set_opt $2 "active" "1"
		echo "VM $2 activated."
	;;
	deactivate)
		cehck_vm $2
		set_opt $2 "active" "0"
		echo "VM $2 deactivated."
	;;
	show)
		check_vm $2
		show_vm $2	
	;;
  *)
	cat <<-EOH
  main commands
  kvmadm list            - list all VM's
  kvmadm start <vm>      - starts a powered off VM
  kvmadm stop <vm>       - stops a running VM
  kvmadm set <vm>        - sets options for a VM
  kvmadm new <vm>        - creates a new VM
  kvmadm activate <vm>   - activates the VM
  kvmadm deactivate <vm> - activates the VM
  
  set options
  cpu <v-cores>
  mem <MB>
  iso <iso-file>
  disk <disk in vm disks folder>
  net <network id> <type|vnic|vlan> <value>
  net <network id> <mac> <rand|value>
	opts <opt string>

  Helpful hints
  =============
  Create a new virtual interface with this command:
  dladm create-vnic -l <interface> <virtual interface>

	Create a new disk with this command:
	zfs create -V 10g $VM_POOL/<disk name>
EOH
	;;
esac
exit 0
